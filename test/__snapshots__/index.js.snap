// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`mungo examples: ast test/fixtures/ThreeParties/BobProtocol.protocol 1`] = `
Object {
  "name": "BobProtocol",
  "states": Array [
    Object {
      "_name": "Connect",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "connect",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "GreetAlice",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "Connect",
      "type": "State",
    },
    Object {
      "_name": "GreetAlice",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "String",
              "type": "Identifier",
            },
          ],
          "name": "sendHelloToAlice",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "GreetCarol",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "GreetAlice",
      "type": "State",
    },
    Object {
      "_name": "GreetCarol",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "String",
              "type": "Identifier",
            },
          ],
          "name": "sendHelloToCarol",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "MakeChoice",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "GreetCarol",
      "type": "State",
    },
    Object {
      "_name": "MakeChoice",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "sendTimeChoiceToAlice",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "unknown:5",
            "methods": Array [
              Object {
                "arguments": Array [],
                "name": "recvTimeFromAlice",
                "returnType": Object {
                  "name": "int",
                  "type": "Identifier",
                },
                "transition": Object {
                  "name": "EndProtocol",
                  "type": "Identifier",
                },
                "type": "Method",
              },
            ],
            "name": null,
            "type": "State",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [],
          "name": "sendTimeChoiceToCarol",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "unknown:6",
            "methods": Array [
              Object {
                "arguments": Array [],
                "name": "recvTimeFromCarol",
                "returnType": Object {
                  "name": "int",
                  "type": "Identifier",
                },
                "transition": Object {
                  "name": "EndProtocol",
                  "type": "Identifier",
                },
                "type": "Method",
              },
            ],
            "name": null,
            "type": "State",
          },
          "type": "Method",
        },
      ],
      "name": "MakeChoice",
      "type": "State",
    },
    Object {
      "_name": "EndProtocol",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "endCommunication",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "end",
            "methods": Array [],
            "name": null,
            "type": "State",
          },
          "type": "Method",
        },
      ],
      "name": "EndProtocol",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/ThreeParties/FriendProtocol.protocol 1`] = `
Object {
  "name": "FriendProtocol",
  "states": Array [
    Object {
      "_name": "Init",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "connect",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "unknown:2",
            "methods": Array [
              Object {
                "arguments": Array [],
                "name": "recvHelloFromBob",
                "returnType": Object {
                  "name": "String",
                  "type": "Identifier",
                },
                "transition": Object {
                  "name": "ReceiveChoice",
                  "type": "Identifier",
                },
                "type": "Method",
              },
            ],
            "name": null,
            "type": "State",
          },
          "type": "Method",
        },
      ],
      "name": "Init",
      "type": "State",
    },
    Object {
      "_name": "ReceiveChoice",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "recvChoiceFromBob",
          "returnType": Object {
            "name": "BobChoice",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "decision:1",
            "transitions": Array [
              Array [
                Object {
                  "name": "TIME",
                  "type": "Identifier",
                },
                "SendTime",
              ],
              Array [
                Object {
                  "name": "END",
                  "type": "Identifier",
                },
                "EndProtocol",
              ],
            ],
            "type": "DecisionState",
          },
          "type": "Method",
        },
      ],
      "name": "ReceiveChoice",
      "type": "State",
    },
    Object {
      "_name": "SendTime",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "int",
              "type": "Identifier",
            },
          ],
          "name": "sendTimeToBob",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "EndProtocol",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "SendTime",
      "type": "State",
    },
    Object {
      "_name": "EndProtocol",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "endCommunication",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "EndProtocol",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/TwoParties/AliceProtocol.protocol 1`] = `
Object {
  "name": "AliceProtocol",
  "states": Array [
    Object {
      "_name": "Init",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "connect",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "unknown:2",
            "methods": Array [
              Object {
                "arguments": Array [],
                "name": "recvStringFromBob",
                "returnType": Object {
                  "name": "String",
                  "type": "Identifier",
                },
                "transition": Object {
                  "name": "ReceiveChoice",
                  "type": "Identifier",
                },
                "type": "Method",
              },
            ],
            "name": null,
            "type": "State",
          },
          "type": "Method",
        },
      ],
      "name": "Init",
      "type": "State",
    },
    Object {
      "_name": "ReceiveChoice",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "choiceFromBob",
          "returnType": Object {
            "name": "BobChoice",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "decision:1",
            "transitions": Array [
              Array [
                Object {
                  "name": "TIME",
                  "type": "Identifier",
                },
                "SendTime",
              ],
              Array [
                Object {
                  "name": "GREET",
                  "type": "Identifier",
                },
                "HowAreYou",
              ],
            ],
            "type": "DecisionState",
          },
          "type": "Method",
        },
      ],
      "name": "ReceiveChoice",
      "type": "State",
    },
    Object {
      "_name": "SendTime",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "int",
              "type": "Identifier",
            },
          ],
          "name": "sendTimeToBob",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "EndProtocol",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "SendTime",
      "type": "State",
    },
    Object {
      "_name": "HowAreYou",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "String",
              "type": "Identifier",
            },
          ],
          "name": "sendGreetToBob",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "EndProtocol",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "HowAreYou",
      "type": "State",
    },
    Object {
      "_name": "EndProtocol",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "endCommunication",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "EndProtocol",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/TwoParties/BobProtocol.protocol 1`] = `
Object {
  "name": "BobProtocol",
  "states": Array [
    Object {
      "_name": "Init",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "connect",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "unknown:2",
            "methods": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "String",
                    "type": "Identifier",
                  },
                ],
                "name": "sendStringToAlice",
                "returnType": Object {
                  "name": "void",
                  "type": "Identifier",
                },
                "transition": Object {
                  "name": "SendChoice",
                  "type": "Identifier",
                },
                "type": "Method",
              },
            ],
            "name": null,
            "type": "State",
          },
          "type": "Method",
        },
      ],
      "name": "Init",
      "type": "State",
    },
    Object {
      "_name": "SendChoice",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "sendTimeChoiceToAlice",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "unknown:4",
            "methods": Array [
              Object {
                "arguments": Array [],
                "name": "recvTimeFromAlice",
                "returnType": Object {
                  "name": "int",
                  "type": "Identifier",
                },
                "transition": Object {
                  "name": "EndProtocol",
                  "type": "Identifier",
                },
                "type": "Method",
              },
            ],
            "name": null,
            "type": "State",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [],
          "name": "sendGreetingChoiceToAlice",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "unknown:5",
            "methods": Array [
              Object {
                "arguments": Array [],
                "name": "recvGreetingFromAlice",
                "returnType": Object {
                  "name": "String",
                  "type": "Identifier",
                },
                "transition": Object {
                  "name": "EndProtocol",
                  "type": "Identifier",
                },
                "type": "Method",
              },
            ],
            "name": null,
            "type": "State",
          },
          "type": "Method",
        },
      ],
      "name": "SendChoice",
      "type": "State",
    },
    Object {
      "_name": "EndProtocol",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "endCommunication",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "end",
            "methods": Array [],
            "name": null,
            "type": "State",
          },
          "type": "Method",
        },
      ],
      "name": "EndProtocol",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/collection/CollectionProtocol.protocol 1`] = `
Object {
  "name": "CollectionProtocol",
  "states": Array [
    Object {
      "_name": "Init",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "int",
              "type": "Identifier",
            },
          ],
          "name": "initialise",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "Empty",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "Init",
      "type": "State",
    },
    Object {
      "_name": "Empty",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "Node",
              "type": "Identifier",
            },
          ],
          "name": "put",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "NonEmpty",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [],
          "name": "close",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "Empty",
      "type": "State",
    },
    Object {
      "_name": "NonEmpty",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "Node",
              "type": "Identifier",
            },
          ],
          "name": "put",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "NonEmpty",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [],
          "name": "get",
          "returnType": Object {
            "name": "Node",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "Unknown",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "NonEmpty",
      "type": "State",
    },
    Object {
      "_name": "Unknown",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "Node",
              "type": "Identifier",
            },
          ],
          "name": "put",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "NonEmpty",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [],
          "name": "isEmpty",
          "returnType": Object {
            "name": "BooleanChoice",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "decision:1",
            "transitions": Array [
              Array [
                Object {
                  "name": "TRUE",
                  "type": "Identifier",
                },
                "Empty",
              ],
              Array [
                Object {
                  "name": "FALSE",
                  "type": "Identifier",
                },
                "NonEmpty",
              ],
            ],
            "type": "DecisionState",
          },
          "type": "Method",
        },
      ],
      "name": "Unknown",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/collection/StackUser/StackUserProtocol.protocol 1`] = `
Object {
  "name": "StackUserProtocol",
  "states": Array [
    Object {
      "_name": "Init",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "Stack",
              "type": "Identifier",
            },
            Object {
              "name": "int",
              "type": "Identifier",
            },
          ],
          "name": "produce",
          "returnType": Object {
            "name": "Stack",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "Consume",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [
            Object {
              "name": "Stack",
              "type": "Identifier",
            },
          ],
          "name": "produce",
          "returnType": Object {
            "name": "Stack",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "Consume",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [],
          "name": "close",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "Init",
      "type": "State",
    },
    Object {
      "_name": "Consume",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "Stack",
              "type": "Identifier",
            },
            Object {
              "name": "int",
              "type": "Identifier",
            },
          ],
          "name": "produce",
          "returnType": Object {
            "name": "Stack",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "Consume",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [
            Object {
              "name": "Stack",
              "type": "Identifier",
            },
          ],
          "name": "produce",
          "returnType": Object {
            "name": "Stack",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "Consume",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [
            Object {
              "name": "Stack",
              "type": "Identifier",
            },
          ],
          "name": "consume",
          "returnType": Object {
            "name": "Stack",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "Init",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "Consume",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/collection/StackUser2/StackUserProtocol.protocol 1`] = `
Object {
  "name": "StackUserProtocol",
  "states": Array [
    Object {
      "_name": "Init",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "int",
              "type": "Identifier",
            },
          ],
          "name": "produce",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "Consume",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [],
          "name": "produce",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "Consume",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [],
          "name": "close",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "Init",
      "type": "State",
    },
    Object {
      "_name": "Consume",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "int",
              "type": "Identifier",
            },
          ],
          "name": "produce",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "Consume",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [],
          "name": "produce",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "Consume",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [],
          "name": "consume",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "Init",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "Consume",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/distributed-client-travelagency-bank/AProtocol.protocol 1`] = `
Object {
  "name": "AProtocol",
  "states": Array [
    Object {
      "_name": "State0",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receive_requestStringFromC",
          "returnType": Object {
            "name": "String",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State1",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State0",
      "type": "State",
    },
    Object {
      "_name": "State1",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "int",
              "type": "Identifier",
            },
          ],
          "name": "send_dataintToC",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State2",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State1",
      "type": "State",
    },
    Object {
      "_name": "State2",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receive_Choice1LabelFromB",
          "returnType": Object {
            "name": "Choice1",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "decision:1",
            "transitions": Array [
              Array [
                Object {
                  "name": "APPROVE",
                  "type": "Identifier",
                },
                "State3",
              ],
              Array [
                Object {
                  "name": "REFUSE",
                  "type": "Identifier",
                },
                "State5",
              ],
            ],
            "type": "DecisionState",
          },
          "type": "Method",
        },
      ],
      "name": "State2",
      "type": "State",
    },
    Object {
      "_name": "State3",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receive_approveBooleanFromB",
          "returnType": Object {
            "name": "Boolean",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State4",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State3",
      "type": "State",
    },
    Object {
      "_name": "State4",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "String",
              "type": "Identifier",
            },
          ],
          "name": "send_invoiceStringToBC",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State4",
      "type": "State",
    },
    Object {
      "_name": "State5",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receive_refuseBooleanFromB",
          "returnType": Object {
            "name": "Boolean",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State5",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/distributed-client-travelagency-bank/BProtocol.protocol 1`] = `
Object {
  "name": "BProtocol",
  "states": Array [
    Object {
      "_name": "State0",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receive_paymentintFromC",
          "returnType": Object {
            "name": "int",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State1",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State0",
      "type": "State",
    },
    Object {
      "_name": "State1",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "send_APPROVEToCA",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State2",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [],
          "name": "send_REFUSEToCA",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State4",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State1",
      "type": "State",
    },
    Object {
      "_name": "State2",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "Boolean",
              "type": "Identifier",
            },
          ],
          "name": "send_approveBooleanToCA",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State3",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State2",
      "type": "State",
    },
    Object {
      "_name": "State3",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receive_invoiceStringFromA",
          "returnType": Object {
            "name": "String",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State3",
      "type": "State",
    },
    Object {
      "_name": "State4",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "Boolean",
              "type": "Identifier",
            },
          ],
          "name": "send_refuseBooleanToCA",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State4",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/distributed-client-travelagency-bank/Bank.protocol 1`] = `
Object {
  "name": "BankProtocol",
  "states": Array [
    Object {
      "_name": "State0",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receivePayment",
          "returnType": Object {
            "name": "Data",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State1",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State0",
      "type": "State",
    },
    Object {
      "_name": "State1",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "boolean",
              "type": "Identifier",
            },
          ],
          "name": "sendApproval",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State1",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/distributed-client-travelagency-bank/CProtocol.protocol 1`] = `
Object {
  "name": "CProtocol",
  "states": Array [
    Object {
      "_name": "State0",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "String",
              "type": "Identifier",
            },
          ],
          "name": "send_requestStringToA",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State1",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State0",
      "type": "State",
    },
    Object {
      "_name": "State1",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receive_dataintFromA",
          "returnType": Object {
            "name": "int",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State2",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State1",
      "type": "State",
    },
    Object {
      "_name": "State2",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "int",
              "type": "Identifier",
            },
          ],
          "name": "send_paymentintToB",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State3",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State2",
      "type": "State",
    },
    Object {
      "_name": "State3",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receive_Choice1LabelFromB",
          "returnType": Object {
            "name": "Choice1",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "decision:1",
            "transitions": Array [
              Array [
                Object {
                  "name": "APPROVE",
                  "type": "Identifier",
                },
                "State4",
              ],
              Array [
                Object {
                  "name": "REFUSE",
                  "type": "Identifier",
                },
                "State6",
              ],
            ],
            "type": "DecisionState",
          },
          "type": "Method",
        },
      ],
      "name": "State3",
      "type": "State",
    },
    Object {
      "_name": "State4",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receive_approveBooleanFromB",
          "returnType": Object {
            "name": "Boolean",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State5",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State4",
      "type": "State",
    },
    Object {
      "_name": "State5",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receive_invoiceStringFromA",
          "returnType": Object {
            "name": "String",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State5",
      "type": "State",
    },
    Object {
      "_name": "State6",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receive_refuseBooleanFromB",
          "returnType": Object {
            "name": "Boolean",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State6",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/distributed-client-travelagency-bank/Client.protocol 1`] = `
Object {
  "name": "ClientProtocol",
  "states": Array [
    Object {
      "_name": "State0",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "Travel",
              "type": "Identifier",
            },
          ],
          "name": "sendRequest",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State1",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State0",
      "type": "State",
    },
    Object {
      "_name": "State1",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receiveData",
          "returnType": Object {
            "name": "Data",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State2",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State1",
      "type": "State",
    },
    Object {
      "_name": "State2",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "Data",
              "type": "Identifier",
            },
          ],
          "name": "payment",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State3",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State2",
      "type": "State",
    },
    Object {
      "_name": "State3",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receiveApproval",
          "returnType": Object {
            "name": "boolean",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "decision:1",
            "transitions": Array [
              Array [
                Object {
                  "name": "true",
                  "type": "Identifier",
                },
                "State4",
              ],
              Array [
                Object {
                  "name": "false",
                  "type": "Identifier",
                },
                "end",
              ],
            ],
            "type": "DecisionState",
          },
          "type": "Method",
        },
      ],
      "name": "State3",
      "type": "State",
    },
    Object {
      "_name": "State4",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receiveInvoice",
          "returnType": Object {
            "name": "Invoice",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State4",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/distributed-client-travelagency-bank/TravelAgency.protocol 1`] = `
Object {
  "name": "TravelAgencyProtocol",
  "states": Array [
    Object {
      "_name": "State0",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receiveRequest",
          "returnType": Object {
            "name": "Travel",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State1",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State0",
      "type": "State",
    },
    Object {
      "_name": "State1",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "Data",
              "type": "Identifier",
            },
          ],
          "name": "sendData",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State2",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State1",
      "type": "State",
    },
    Object {
      "_name": "State2",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receiveApproval",
          "returnType": Object {
            "name": "boolean",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "decision:1",
            "transitions": Array [
              Array [
                Object {
                  "name": "true",
                  "type": "Identifier",
                },
                "State3",
              ],
              Array [
                Object {
                  "name": "false",
                  "type": "Identifier",
                },
                "end",
              ],
            ],
            "type": "DecisionState",
          },
          "type": "Method",
        },
      ],
      "name": "State2",
      "type": "State",
    },
    Object {
      "_name": "State3",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "Invoice",
              "type": "Identifier",
            },
          ],
          "name": "sendInvoice",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State3",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/file.protocol 1`] = `
Object {
  "name": "FileProtocol",
  "states": Array [
    Object {
      "_name": "Init",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "open",
          "returnType": Object {
            "name": "Status",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "decision:1",
            "transitions": Array [
              Array [
                Object {
                  "name": "OK",
                  "type": "Identifier",
                },
                "Open",
              ],
              Array [
                Object {
                  "name": "ERROR",
                  "type": "Identifier",
                },
                "end",
              ],
            ],
            "type": "DecisionState",
          },
          "type": "Method",
        },
      ],
      "name": "Init",
      "type": "State",
    },
    Object {
      "_name": "Open",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "hasNext",
          "returnType": Object {
            "name": "Boolean",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "decision:2",
            "transitions": Array [
              Array [
                Object {
                  "name": "TRUE",
                  "type": "Identifier",
                },
                "Read",
              ],
              Array [
                Object {
                  "name": "FALSE",
                  "type": "Identifier",
                },
                "Close",
              ],
            ],
            "type": "DecisionState",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [],
          "name": "close",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "Open",
      "type": "State",
    },
    Object {
      "_name": "Read",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "read",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "Open",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "Read",
      "type": "State",
    },
    Object {
      "_name": "Close",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "close",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "end",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "Close",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/infinite/BankProtocol.protocol 1`] = `
Object {
  "name": "BankProtocol",
  "states": Array [
    Object {
      "_name": "State0",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receivePayment",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State0",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State0",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/local-client-travelagency-bank/BankProtocol.protocol 1`] = `
Object {
  "name": "BankProtocol",
  "states": Array [
    Object {
      "_name": "State0",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "String",
              "type": "Identifier",
            },
          ],
          "name": "receivePayment",
          "returnType": Object {
            "name": "PaymentStatus",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State0",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State0",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/local-client-travelagency-bank/ClientProtocol.protocol 1`] = `
Object {
  "name": "ClientProtocol",
  "states": Array [
    Object {
      "_name": "State0",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receiveInfo",
          "returnType": Object {
            "name": "String",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State0",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [
            Object {
              "name": "String",
              "type": "Identifier",
            },
          ],
          "name": "sendRequest",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State1",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State0",
      "type": "State",
    },
    Object {
      "_name": "State1",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "String",
              "type": "Identifier",
            },
          ],
          "name": "tryPayment",
          "returnType": Object {
            "name": "PaymentStatus",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "decision:1",
            "transitions": Array [
              Array [
                Object {
                  "name": "OK",
                  "type": "Identifier",
                },
                "State2",
              ],
              Array [
                Object {
                  "name": "KO",
                  "type": "Identifier",
                },
                "State0",
              ],
              Array [
                Object {
                  "name": "TA",
                  "type": "Identifier",
                },
                "State1",
              ],
            ],
            "type": "DecisionState",
          },
          "type": "Method",
        },
      ],
      "name": "State1",
      "type": "State",
    },
    Object {
      "_name": "State2",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "receiveInvoice",
          "returnType": Object {
            "name": "String",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State0",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State2",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: ast test/fixtures/local-client-travelagency-bank/TravelAgencyProtocol.protocol 1`] = `
Object {
  "name": "TravelAgencyProtocol",
  "states": Array [
    Object {
      "_name": "State0",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "getInfo",
          "returnType": Object {
            "name": "String",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State0",
            "type": "Identifier",
          },
          "type": "Method",
        },
        Object {
          "arguments": Array [
            Object {
              "name": "String",
              "type": "Identifier",
            },
          ],
          "name": "receiveRequest",
          "returnType": Object {
            "name": "void",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State1",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State0",
      "type": "State",
    },
    Object {
      "_name": "State1",
      "methods": Array [
        Object {
          "arguments": Array [
            Object {
              "name": "String",
              "type": "Identifier",
            },
          ],
          "name": "tryPayment",
          "returnType": Object {
            "name": "PaymentStatus",
            "type": "Identifier",
          },
          "transition": Object {
            "_name": "decision:1",
            "transitions": Array [
              Array [
                Object {
                  "name": "OK",
                  "type": "Identifier",
                },
                "State2",
              ],
              Array [
                Object {
                  "name": "KO",
                  "type": "Identifier",
                },
                "State0",
              ],
              Array [
                Object {
                  "name": "TA",
                  "type": "Identifier",
                },
                "State1",
              ],
            ],
            "type": "DecisionState",
          },
          "type": "Method",
        },
      ],
      "name": "State1",
      "type": "State",
    },
    Object {
      "_name": "State2",
      "methods": Array [
        Object {
          "arguments": Array [],
          "name": "getInvoice",
          "returnType": Object {
            "name": "String",
            "type": "Identifier",
          },
          "transition": Object {
            "name": "State0",
            "type": "Identifier",
          },
          "type": "Method",
        },
      ],
      "name": "State2",
      "type": "State",
    },
  ],
  "type": "Typestate",
}
`;

exports[`mungo examples: automaton test/fixtures/ThreeParties/BobProtocol.protocol 1`] = `
Object {
  "choices": Set {},
  "final": Set {
    "end",
  },
  "lTransitions": Array [],
  "labels": Array [],
  "mTransitions": Array [
    Object {
      "from": "Connect",
      "to": "GreetAlice",
      "transition": Object {
        "arguments": Array [],
        "name": "connect",
        "returnType": "void",
      },
    },
    Object {
      "from": "GreetAlice",
      "to": "GreetCarol",
      "transition": Object {
        "arguments": Array [
          "String",
        ],
        "name": "sendHelloToAlice",
        "returnType": "void",
      },
    },
    Object {
      "from": "GreetCarol",
      "to": "MakeChoice",
      "transition": Object {
        "arguments": Array [
          "String",
        ],
        "name": "sendHelloToCarol",
        "returnType": "void",
      },
    },
    Object {
      "from": "unknown:5",
      "to": "EndProtocol",
      "transition": Object {
        "arguments": Array [],
        "name": "recvTimeFromAlice",
        "returnType": "int",
      },
    },
    Object {
      "from": "MakeChoice",
      "to": "unknown:5",
      "transition": Object {
        "arguments": Array [],
        "name": "sendTimeChoiceToAlice",
        "returnType": "void",
      },
    },
    Object {
      "from": "unknown:6",
      "to": "EndProtocol",
      "transition": Object {
        "arguments": Array [],
        "name": "recvTimeFromCarol",
        "returnType": "int",
      },
    },
    Object {
      "from": "MakeChoice",
      "to": "unknown:6",
      "transition": Object {
        "arguments": Array [],
        "name": "sendTimeChoiceToCarol",
        "returnType": "void",
      },
    },
    Object {
      "from": "EndProtocol",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "endCommunication",
        "returnType": "void",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [],
      "name": "connect",
      "returnType": "void",
    },
    Object {
      "arguments": Array [
        "String",
      ],
      "name": "sendHelloToAlice",
      "returnType": "void",
    },
    Object {
      "arguments": Array [
        "String",
      ],
      "name": "sendHelloToCarol",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "recvTimeFromAlice",
      "returnType": "int",
    },
    Object {
      "arguments": Array [],
      "name": "sendTimeChoiceToAlice",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "recvTimeFromCarol",
      "returnType": "int",
    },
    Object {
      "arguments": Array [],
      "name": "sendTimeChoiceToCarol",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "endCommunication",
      "returnType": "void",
    },
  ],
  "start": "Connect",
  "states": Set {
    "end",
    "Connect",
    "GreetAlice",
    "GreetCarol",
    "MakeChoice",
    "EndProtocol",
    "unknown:5",
    "unknown:6",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/ThreeParties/FriendProtocol.protocol 1`] = `
Object {
  "choices": Set {
    "decision:1",
  },
  "final": Set {
    "end",
  },
  "lTransitions": Array [
    Object {
      "from": "decision:1",
      "to": "SendTime",
      "transition": Object {
        "name": "TIME",
      },
    },
    Object {
      "from": "decision:1",
      "to": "EndProtocol",
      "transition": Object {
        "name": "END",
      },
    },
  ],
  "labels": Array [
    Object {
      "name": "TIME",
    },
    Object {
      "name": "END",
    },
  ],
  "mTransitions": Array [
    Object {
      "from": "unknown:2",
      "to": "ReceiveChoice",
      "transition": Object {
        "arguments": Array [],
        "name": "recvHelloFromBob",
        "returnType": "String",
      },
    },
    Object {
      "from": "Init",
      "to": "unknown:2",
      "transition": Object {
        "arguments": Array [],
        "name": "connect",
        "returnType": "void",
      },
    },
    Object {
      "from": "ReceiveChoice",
      "to": "decision:1",
      "transition": Object {
        "arguments": Array [],
        "name": "recvChoiceFromBob",
        "returnType": "BobChoice",
      },
    },
    Object {
      "from": "SendTime",
      "to": "EndProtocol",
      "transition": Object {
        "arguments": Array [
          "int",
        ],
        "name": "sendTimeToBob",
        "returnType": "void",
      },
    },
    Object {
      "from": "EndProtocol",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "endCommunication",
        "returnType": "void",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [],
      "name": "recvHelloFromBob",
      "returnType": "String",
    },
    Object {
      "arguments": Array [],
      "name": "connect",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "recvChoiceFromBob",
      "returnType": "BobChoice",
    },
    Object {
      "arguments": Array [
        "int",
      ],
      "name": "sendTimeToBob",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "endCommunication",
      "returnType": "void",
    },
  ],
  "start": "Init",
  "states": Set {
    "end",
    "Init",
    "ReceiveChoice",
    "SendTime",
    "EndProtocol",
    "unknown:2",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/TwoParties/AliceProtocol.protocol 1`] = `
Object {
  "choices": Set {
    "decision:1",
  },
  "final": Set {
    "end",
  },
  "lTransitions": Array [
    Object {
      "from": "decision:1",
      "to": "SendTime",
      "transition": Object {
        "name": "TIME",
      },
    },
    Object {
      "from": "decision:1",
      "to": "HowAreYou",
      "transition": Object {
        "name": "GREET",
      },
    },
  ],
  "labels": Array [
    Object {
      "name": "TIME",
    },
    Object {
      "name": "GREET",
    },
  ],
  "mTransitions": Array [
    Object {
      "from": "unknown:2",
      "to": "ReceiveChoice",
      "transition": Object {
        "arguments": Array [],
        "name": "recvStringFromBob",
        "returnType": "String",
      },
    },
    Object {
      "from": "Init",
      "to": "unknown:2",
      "transition": Object {
        "arguments": Array [],
        "name": "connect",
        "returnType": "void",
      },
    },
    Object {
      "from": "ReceiveChoice",
      "to": "decision:1",
      "transition": Object {
        "arguments": Array [],
        "name": "choiceFromBob",
        "returnType": "BobChoice",
      },
    },
    Object {
      "from": "SendTime",
      "to": "EndProtocol",
      "transition": Object {
        "arguments": Array [
          "int",
        ],
        "name": "sendTimeToBob",
        "returnType": "void",
      },
    },
    Object {
      "from": "HowAreYou",
      "to": "EndProtocol",
      "transition": Object {
        "arguments": Array [
          "String",
        ],
        "name": "sendGreetToBob",
        "returnType": "void",
      },
    },
    Object {
      "from": "EndProtocol",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "endCommunication",
        "returnType": "void",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [],
      "name": "recvStringFromBob",
      "returnType": "String",
    },
    Object {
      "arguments": Array [],
      "name": "connect",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "choiceFromBob",
      "returnType": "BobChoice",
    },
    Object {
      "arguments": Array [
        "int",
      ],
      "name": "sendTimeToBob",
      "returnType": "void",
    },
    Object {
      "arguments": Array [
        "String",
      ],
      "name": "sendGreetToBob",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "endCommunication",
      "returnType": "void",
    },
  ],
  "start": "Init",
  "states": Set {
    "end",
    "Init",
    "ReceiveChoice",
    "SendTime",
    "HowAreYou",
    "EndProtocol",
    "unknown:2",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/TwoParties/BobProtocol.protocol 1`] = `
Object {
  "choices": Set {},
  "final": Set {
    "end",
  },
  "lTransitions": Array [],
  "labels": Array [],
  "mTransitions": Array [
    Object {
      "from": "unknown:2",
      "to": "SendChoice",
      "transition": Object {
        "arguments": Array [
          "String",
        ],
        "name": "sendStringToAlice",
        "returnType": "void",
      },
    },
    Object {
      "from": "Init",
      "to": "unknown:2",
      "transition": Object {
        "arguments": Array [],
        "name": "connect",
        "returnType": "void",
      },
    },
    Object {
      "from": "unknown:4",
      "to": "EndProtocol",
      "transition": Object {
        "arguments": Array [],
        "name": "recvTimeFromAlice",
        "returnType": "int",
      },
    },
    Object {
      "from": "SendChoice",
      "to": "unknown:4",
      "transition": Object {
        "arguments": Array [],
        "name": "sendTimeChoiceToAlice",
        "returnType": "void",
      },
    },
    Object {
      "from": "unknown:5",
      "to": "EndProtocol",
      "transition": Object {
        "arguments": Array [],
        "name": "recvGreetingFromAlice",
        "returnType": "String",
      },
    },
    Object {
      "from": "SendChoice",
      "to": "unknown:5",
      "transition": Object {
        "arguments": Array [],
        "name": "sendGreetingChoiceToAlice",
        "returnType": "void",
      },
    },
    Object {
      "from": "EndProtocol",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "endCommunication",
        "returnType": "void",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [
        "String",
      ],
      "name": "sendStringToAlice",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "connect",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "recvTimeFromAlice",
      "returnType": "int",
    },
    Object {
      "arguments": Array [],
      "name": "sendTimeChoiceToAlice",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "recvGreetingFromAlice",
      "returnType": "String",
    },
    Object {
      "arguments": Array [],
      "name": "sendGreetingChoiceToAlice",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "endCommunication",
      "returnType": "void",
    },
  ],
  "start": "Init",
  "states": Set {
    "end",
    "Init",
    "SendChoice",
    "EndProtocol",
    "unknown:2",
    "unknown:4",
    "unknown:5",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/collection/CollectionProtocol.protocol 1`] = `
Object {
  "choices": Set {
    "decision:1",
  },
  "final": Set {
    "end",
  },
  "lTransitions": Array [
    Object {
      "from": "decision:1",
      "to": "Empty",
      "transition": Object {
        "name": "TRUE",
      },
    },
    Object {
      "from": "decision:1",
      "to": "NonEmpty",
      "transition": Object {
        "name": "FALSE",
      },
    },
  ],
  "labels": Array [
    Object {
      "name": "TRUE",
    },
    Object {
      "name": "FALSE",
    },
  ],
  "mTransitions": Array [
    Object {
      "from": "Init",
      "to": "Empty",
      "transition": Object {
        "arguments": Array [
          "int",
        ],
        "name": "initialise",
        "returnType": "void",
      },
    },
    Object {
      "from": "Empty",
      "to": "NonEmpty",
      "transition": Object {
        "arguments": Array [
          "Node",
        ],
        "name": "put",
        "returnType": "void",
      },
    },
    Object {
      "from": "Empty",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "close",
        "returnType": "void",
      },
    },
    Object {
      "from": "NonEmpty",
      "to": "NonEmpty",
      "transition": Object {
        "arguments": Array [
          "Node",
        ],
        "name": "put",
        "returnType": "void",
      },
    },
    Object {
      "from": "NonEmpty",
      "to": "Unknown",
      "transition": Object {
        "arguments": Array [],
        "name": "get",
        "returnType": "Node",
      },
    },
    Object {
      "from": "Unknown",
      "to": "NonEmpty",
      "transition": Object {
        "arguments": Array [
          "Node",
        ],
        "name": "put",
        "returnType": "void",
      },
    },
    Object {
      "from": "Unknown",
      "to": "decision:1",
      "transition": Object {
        "arguments": Array [],
        "name": "isEmpty",
        "returnType": "BooleanChoice",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [
        "int",
      ],
      "name": "initialise",
      "returnType": "void",
    },
    Object {
      "arguments": Array [
        "Node",
      ],
      "name": "put",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "close",
      "returnType": "void",
    },
    Object {
      "arguments": Array [
        "Node",
      ],
      "name": "put",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "get",
      "returnType": "Node",
    },
    Object {
      "arguments": Array [
        "Node",
      ],
      "name": "put",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "isEmpty",
      "returnType": "BooleanChoice",
    },
  ],
  "start": "Init",
  "states": Set {
    "end",
    "Init",
    "Empty",
    "NonEmpty",
    "Unknown",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/collection/StackUser/StackUserProtocol.protocol 1`] = `
Object {
  "choices": Set {},
  "final": Set {
    "end",
  },
  "lTransitions": Array [],
  "labels": Array [],
  "mTransitions": Array [
    Object {
      "from": "Init",
      "to": "Consume",
      "transition": Object {
        "arguments": Array [
          "Stack",
          "int",
        ],
        "name": "produce",
        "returnType": "Stack",
      },
    },
    Object {
      "from": "Init",
      "to": "Consume",
      "transition": Object {
        "arguments": Array [
          "Stack",
        ],
        "name": "produce",
        "returnType": "Stack",
      },
    },
    Object {
      "from": "Init",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "close",
        "returnType": "void",
      },
    },
    Object {
      "from": "Consume",
      "to": "Consume",
      "transition": Object {
        "arguments": Array [
          "Stack",
          "int",
        ],
        "name": "produce",
        "returnType": "Stack",
      },
    },
    Object {
      "from": "Consume",
      "to": "Consume",
      "transition": Object {
        "arguments": Array [
          "Stack",
        ],
        "name": "produce",
        "returnType": "Stack",
      },
    },
    Object {
      "from": "Consume",
      "to": "Init",
      "transition": Object {
        "arguments": Array [
          "Stack",
        ],
        "name": "consume",
        "returnType": "Stack",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [
        "Stack",
        "int",
      ],
      "name": "produce",
      "returnType": "Stack",
    },
    Object {
      "arguments": Array [
        "Stack",
      ],
      "name": "produce",
      "returnType": "Stack",
    },
    Object {
      "arguments": Array [],
      "name": "close",
      "returnType": "void",
    },
    Object {
      "arguments": Array [
        "Stack",
        "int",
      ],
      "name": "produce",
      "returnType": "Stack",
    },
    Object {
      "arguments": Array [
        "Stack",
      ],
      "name": "produce",
      "returnType": "Stack",
    },
    Object {
      "arguments": Array [
        "Stack",
      ],
      "name": "consume",
      "returnType": "Stack",
    },
  ],
  "start": "Init",
  "states": Set {
    "end",
    "Init",
    "Consume",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/collection/StackUser2/StackUserProtocol.protocol 1`] = `
Object {
  "choices": Set {},
  "final": Set {
    "end",
  },
  "lTransitions": Array [],
  "labels": Array [],
  "mTransitions": Array [
    Object {
      "from": "Init",
      "to": "Consume",
      "transition": Object {
        "arguments": Array [
          "int",
        ],
        "name": "produce",
        "returnType": "void",
      },
    },
    Object {
      "from": "Init",
      "to": "Consume",
      "transition": Object {
        "arguments": Array [],
        "name": "produce",
        "returnType": "void",
      },
    },
    Object {
      "from": "Init",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "close",
        "returnType": "void",
      },
    },
    Object {
      "from": "Consume",
      "to": "Consume",
      "transition": Object {
        "arguments": Array [
          "int",
        ],
        "name": "produce",
        "returnType": "void",
      },
    },
    Object {
      "from": "Consume",
      "to": "Consume",
      "transition": Object {
        "arguments": Array [],
        "name": "produce",
        "returnType": "void",
      },
    },
    Object {
      "from": "Consume",
      "to": "Init",
      "transition": Object {
        "arguments": Array [],
        "name": "consume",
        "returnType": "void",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [
        "int",
      ],
      "name": "produce",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "produce",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "close",
      "returnType": "void",
    },
    Object {
      "arguments": Array [
        "int",
      ],
      "name": "produce",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "produce",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "consume",
      "returnType": "void",
    },
  ],
  "start": "Init",
  "states": Set {
    "end",
    "Init",
    "Consume",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/distributed-client-travelagency-bank/AProtocol.protocol 1`] = `
Object {
  "choices": Set {
    "decision:1",
  },
  "final": Set {
    "end",
  },
  "lTransitions": Array [
    Object {
      "from": "decision:1",
      "to": "State3",
      "transition": Object {
        "name": "APPROVE",
      },
    },
    Object {
      "from": "decision:1",
      "to": "State5",
      "transition": Object {
        "name": "REFUSE",
      },
    },
  ],
  "labels": Array [
    Object {
      "name": "APPROVE",
    },
    Object {
      "name": "REFUSE",
    },
  ],
  "mTransitions": Array [
    Object {
      "from": "State0",
      "to": "State1",
      "transition": Object {
        "arguments": Array [],
        "name": "receive_requestStringFromC",
        "returnType": "String",
      },
    },
    Object {
      "from": "State1",
      "to": "State2",
      "transition": Object {
        "arguments": Array [
          "int",
        ],
        "name": "send_dataintToC",
        "returnType": "void",
      },
    },
    Object {
      "from": "State2",
      "to": "decision:1",
      "transition": Object {
        "arguments": Array [],
        "name": "receive_Choice1LabelFromB",
        "returnType": "Choice1",
      },
    },
    Object {
      "from": "State3",
      "to": "State4",
      "transition": Object {
        "arguments": Array [],
        "name": "receive_approveBooleanFromB",
        "returnType": "Boolean",
      },
    },
    Object {
      "from": "State4",
      "to": "end",
      "transition": Object {
        "arguments": Array [
          "String",
        ],
        "name": "send_invoiceStringToBC",
        "returnType": "void",
      },
    },
    Object {
      "from": "State5",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "receive_refuseBooleanFromB",
        "returnType": "Boolean",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [],
      "name": "receive_requestStringFromC",
      "returnType": "String",
    },
    Object {
      "arguments": Array [
        "int",
      ],
      "name": "send_dataintToC",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "receive_Choice1LabelFromB",
      "returnType": "Choice1",
    },
    Object {
      "arguments": Array [],
      "name": "receive_approveBooleanFromB",
      "returnType": "Boolean",
    },
    Object {
      "arguments": Array [
        "String",
      ],
      "name": "send_invoiceStringToBC",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "receive_refuseBooleanFromB",
      "returnType": "Boolean",
    },
  ],
  "start": "State0",
  "states": Set {
    "end",
    "State0",
    "State1",
    "State2",
    "State3",
    "State4",
    "State5",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/distributed-client-travelagency-bank/BProtocol.protocol 1`] = `
Object {
  "choices": Set {},
  "final": Set {
    "end",
  },
  "lTransitions": Array [],
  "labels": Array [],
  "mTransitions": Array [
    Object {
      "from": "State0",
      "to": "State1",
      "transition": Object {
        "arguments": Array [],
        "name": "receive_paymentintFromC",
        "returnType": "int",
      },
    },
    Object {
      "from": "State1",
      "to": "State2",
      "transition": Object {
        "arguments": Array [],
        "name": "send_APPROVEToCA",
        "returnType": "void",
      },
    },
    Object {
      "from": "State1",
      "to": "State4",
      "transition": Object {
        "arguments": Array [],
        "name": "send_REFUSEToCA",
        "returnType": "void",
      },
    },
    Object {
      "from": "State2",
      "to": "State3",
      "transition": Object {
        "arguments": Array [
          "Boolean",
        ],
        "name": "send_approveBooleanToCA",
        "returnType": "void",
      },
    },
    Object {
      "from": "State3",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "receive_invoiceStringFromA",
        "returnType": "String",
      },
    },
    Object {
      "from": "State4",
      "to": "end",
      "transition": Object {
        "arguments": Array [
          "Boolean",
        ],
        "name": "send_refuseBooleanToCA",
        "returnType": "void",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [],
      "name": "receive_paymentintFromC",
      "returnType": "int",
    },
    Object {
      "arguments": Array [],
      "name": "send_APPROVEToCA",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "send_REFUSEToCA",
      "returnType": "void",
    },
    Object {
      "arguments": Array [
        "Boolean",
      ],
      "name": "send_approveBooleanToCA",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "receive_invoiceStringFromA",
      "returnType": "String",
    },
    Object {
      "arguments": Array [
        "Boolean",
      ],
      "name": "send_refuseBooleanToCA",
      "returnType": "void",
    },
  ],
  "start": "State0",
  "states": Set {
    "end",
    "State0",
    "State1",
    "State2",
    "State3",
    "State4",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/distributed-client-travelagency-bank/Bank.protocol 1`] = `
Object {
  "choices": Set {},
  "final": Set {
    "end",
  },
  "lTransitions": Array [],
  "labels": Array [],
  "mTransitions": Array [
    Object {
      "from": "State0",
      "to": "State1",
      "transition": Object {
        "arguments": Array [],
        "name": "receivePayment",
        "returnType": "Data",
      },
    },
    Object {
      "from": "State1",
      "to": "end",
      "transition": Object {
        "arguments": Array [
          "boolean",
        ],
        "name": "sendApproval",
        "returnType": "void",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [],
      "name": "receivePayment",
      "returnType": "Data",
    },
    Object {
      "arguments": Array [
        "boolean",
      ],
      "name": "sendApproval",
      "returnType": "void",
    },
  ],
  "start": "State0",
  "states": Set {
    "end",
    "State0",
    "State1",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/distributed-client-travelagency-bank/CProtocol.protocol 1`] = `
Object {
  "choices": Set {
    "decision:1",
  },
  "final": Set {
    "end",
  },
  "lTransitions": Array [
    Object {
      "from": "decision:1",
      "to": "State4",
      "transition": Object {
        "name": "APPROVE",
      },
    },
    Object {
      "from": "decision:1",
      "to": "State6",
      "transition": Object {
        "name": "REFUSE",
      },
    },
  ],
  "labels": Array [
    Object {
      "name": "APPROVE",
    },
    Object {
      "name": "REFUSE",
    },
  ],
  "mTransitions": Array [
    Object {
      "from": "State0",
      "to": "State1",
      "transition": Object {
        "arguments": Array [
          "String",
        ],
        "name": "send_requestStringToA",
        "returnType": "void",
      },
    },
    Object {
      "from": "State1",
      "to": "State2",
      "transition": Object {
        "arguments": Array [],
        "name": "receive_dataintFromA",
        "returnType": "int",
      },
    },
    Object {
      "from": "State2",
      "to": "State3",
      "transition": Object {
        "arguments": Array [
          "int",
        ],
        "name": "send_paymentintToB",
        "returnType": "void",
      },
    },
    Object {
      "from": "State3",
      "to": "decision:1",
      "transition": Object {
        "arguments": Array [],
        "name": "receive_Choice1LabelFromB",
        "returnType": "Choice1",
      },
    },
    Object {
      "from": "State4",
      "to": "State5",
      "transition": Object {
        "arguments": Array [],
        "name": "receive_approveBooleanFromB",
        "returnType": "Boolean",
      },
    },
    Object {
      "from": "State5",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "receive_invoiceStringFromA",
        "returnType": "String",
      },
    },
    Object {
      "from": "State6",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "receive_refuseBooleanFromB",
        "returnType": "Boolean",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [
        "String",
      ],
      "name": "send_requestStringToA",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "receive_dataintFromA",
      "returnType": "int",
    },
    Object {
      "arguments": Array [
        "int",
      ],
      "name": "send_paymentintToB",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "receive_Choice1LabelFromB",
      "returnType": "Choice1",
    },
    Object {
      "arguments": Array [],
      "name": "receive_approveBooleanFromB",
      "returnType": "Boolean",
    },
    Object {
      "arguments": Array [],
      "name": "receive_invoiceStringFromA",
      "returnType": "String",
    },
    Object {
      "arguments": Array [],
      "name": "receive_refuseBooleanFromB",
      "returnType": "Boolean",
    },
  ],
  "start": "State0",
  "states": Set {
    "end",
    "State0",
    "State1",
    "State2",
    "State3",
    "State4",
    "State5",
    "State6",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/distributed-client-travelagency-bank/Client.protocol 1`] = `
Object {
  "choices": Set {
    "decision:1",
  },
  "final": Set {
    "end",
  },
  "lTransitions": Array [
    Object {
      "from": "decision:1",
      "to": "State4",
      "transition": Object {
        "name": "true",
      },
    },
    Object {
      "from": "decision:1",
      "to": "end",
      "transition": Object {
        "name": "false",
      },
    },
  ],
  "labels": Array [
    Object {
      "name": "true",
    },
    Object {
      "name": "false",
    },
  ],
  "mTransitions": Array [
    Object {
      "from": "State0",
      "to": "State1",
      "transition": Object {
        "arguments": Array [
          "Travel",
        ],
        "name": "sendRequest",
        "returnType": "void",
      },
    },
    Object {
      "from": "State1",
      "to": "State2",
      "transition": Object {
        "arguments": Array [],
        "name": "receiveData",
        "returnType": "Data",
      },
    },
    Object {
      "from": "State2",
      "to": "State3",
      "transition": Object {
        "arguments": Array [
          "Data",
        ],
        "name": "payment",
        "returnType": "void",
      },
    },
    Object {
      "from": "State3",
      "to": "decision:1",
      "transition": Object {
        "arguments": Array [],
        "name": "receiveApproval",
        "returnType": "boolean",
      },
    },
    Object {
      "from": "State4",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "receiveInvoice",
        "returnType": "Invoice",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [
        "Travel",
      ],
      "name": "sendRequest",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "receiveData",
      "returnType": "Data",
    },
    Object {
      "arguments": Array [
        "Data",
      ],
      "name": "payment",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "receiveApproval",
      "returnType": "boolean",
    },
    Object {
      "arguments": Array [],
      "name": "receiveInvoice",
      "returnType": "Invoice",
    },
  ],
  "start": "State0",
  "states": Set {
    "end",
    "State0",
    "State1",
    "State2",
    "State3",
    "State4",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/distributed-client-travelagency-bank/TravelAgency.protocol 1`] = `
Object {
  "choices": Set {
    "decision:1",
  },
  "final": Set {
    "end",
  },
  "lTransitions": Array [
    Object {
      "from": "decision:1",
      "to": "State3",
      "transition": Object {
        "name": "true",
      },
    },
    Object {
      "from": "decision:1",
      "to": "end",
      "transition": Object {
        "name": "false",
      },
    },
  ],
  "labels": Array [
    Object {
      "name": "true",
    },
    Object {
      "name": "false",
    },
  ],
  "mTransitions": Array [
    Object {
      "from": "State0",
      "to": "State1",
      "transition": Object {
        "arguments": Array [],
        "name": "receiveRequest",
        "returnType": "Travel",
      },
    },
    Object {
      "from": "State1",
      "to": "State2",
      "transition": Object {
        "arguments": Array [
          "Data",
        ],
        "name": "sendData",
        "returnType": "void",
      },
    },
    Object {
      "from": "State2",
      "to": "decision:1",
      "transition": Object {
        "arguments": Array [],
        "name": "receiveApproval",
        "returnType": "boolean",
      },
    },
    Object {
      "from": "State3",
      "to": "end",
      "transition": Object {
        "arguments": Array [
          "Invoice",
        ],
        "name": "sendInvoice",
        "returnType": "void",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [],
      "name": "receiveRequest",
      "returnType": "Travel",
    },
    Object {
      "arguments": Array [
        "Data",
      ],
      "name": "sendData",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "receiveApproval",
      "returnType": "boolean",
    },
    Object {
      "arguments": Array [
        "Invoice",
      ],
      "name": "sendInvoice",
      "returnType": "void",
    },
  ],
  "start": "State0",
  "states": Set {
    "end",
    "State0",
    "State1",
    "State2",
    "State3",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/file.protocol 1`] = `
Object {
  "choices": Set {
    "decision:1",
    "decision:2",
  },
  "final": Set {
    "end",
  },
  "lTransitions": Array [
    Object {
      "from": "decision:1",
      "to": "Open",
      "transition": Object {
        "name": "OK",
      },
    },
    Object {
      "from": "decision:1",
      "to": "end",
      "transition": Object {
        "name": "ERROR",
      },
    },
    Object {
      "from": "decision:2",
      "to": "Read",
      "transition": Object {
        "name": "TRUE",
      },
    },
    Object {
      "from": "decision:2",
      "to": "Close",
      "transition": Object {
        "name": "FALSE",
      },
    },
  ],
  "labels": Array [
    Object {
      "name": "OK",
    },
    Object {
      "name": "ERROR",
    },
    Object {
      "name": "TRUE",
    },
    Object {
      "name": "FALSE",
    },
  ],
  "mTransitions": Array [
    Object {
      "from": "Init",
      "to": "decision:1",
      "transition": Object {
        "arguments": Array [],
        "name": "open",
        "returnType": "Status",
      },
    },
    Object {
      "from": "Open",
      "to": "decision:2",
      "transition": Object {
        "arguments": Array [],
        "name": "hasNext",
        "returnType": "Boolean",
      },
    },
    Object {
      "from": "Open",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "close",
        "returnType": "void",
      },
    },
    Object {
      "from": "Read",
      "to": "Open",
      "transition": Object {
        "arguments": Array [],
        "name": "read",
        "returnType": "void",
      },
    },
    Object {
      "from": "Close",
      "to": "end",
      "transition": Object {
        "arguments": Array [],
        "name": "close",
        "returnType": "void",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [],
      "name": "open",
      "returnType": "Status",
    },
    Object {
      "arguments": Array [],
      "name": "hasNext",
      "returnType": "Boolean",
    },
    Object {
      "arguments": Array [],
      "name": "close",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "read",
      "returnType": "void",
    },
    Object {
      "arguments": Array [],
      "name": "close",
      "returnType": "void",
    },
  ],
  "start": "Init",
  "states": Set {
    "end",
    "Init",
    "Open",
    "Read",
    "Close",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/infinite/BankProtocol.protocol 1`] = `
Object {
  "choices": Set {},
  "final": Set {
    "end",
  },
  "lTransitions": Array [],
  "labels": Array [],
  "mTransitions": Array [
    Object {
      "from": "State0",
      "to": "State0",
      "transition": Object {
        "arguments": Array [],
        "name": "receivePayment",
        "returnType": "void",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [],
      "name": "receivePayment",
      "returnType": "void",
    },
  ],
  "start": "State0",
  "states": Set {
    "end",
    "State0",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/local-client-travelagency-bank/BankProtocol.protocol 1`] = `
Object {
  "choices": Set {},
  "final": Set {
    "end",
  },
  "lTransitions": Array [],
  "labels": Array [],
  "mTransitions": Array [
    Object {
      "from": "State0",
      "to": "State0",
      "transition": Object {
        "arguments": Array [
          "String",
        ],
        "name": "receivePayment",
        "returnType": "PaymentStatus",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [
        "String",
      ],
      "name": "receivePayment",
      "returnType": "PaymentStatus",
    },
  ],
  "start": "State0",
  "states": Set {
    "end",
    "State0",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/local-client-travelagency-bank/ClientProtocol.protocol 1`] = `
Object {
  "choices": Set {
    "decision:1",
  },
  "final": Set {
    "end",
  },
  "lTransitions": Array [
    Object {
      "from": "decision:1",
      "to": "State2",
      "transition": Object {
        "name": "OK",
      },
    },
    Object {
      "from": "decision:1",
      "to": "State0",
      "transition": Object {
        "name": "KO",
      },
    },
    Object {
      "from": "decision:1",
      "to": "State1",
      "transition": Object {
        "name": "TA",
      },
    },
  ],
  "labels": Array [
    Object {
      "name": "OK",
    },
    Object {
      "name": "KO",
    },
    Object {
      "name": "TA",
    },
  ],
  "mTransitions": Array [
    Object {
      "from": "State0",
      "to": "State0",
      "transition": Object {
        "arguments": Array [],
        "name": "receiveInfo",
        "returnType": "String",
      },
    },
    Object {
      "from": "State0",
      "to": "State1",
      "transition": Object {
        "arguments": Array [
          "String",
        ],
        "name": "sendRequest",
        "returnType": "void",
      },
    },
    Object {
      "from": "State1",
      "to": "decision:1",
      "transition": Object {
        "arguments": Array [
          "String",
        ],
        "name": "tryPayment",
        "returnType": "PaymentStatus",
      },
    },
    Object {
      "from": "State2",
      "to": "State0",
      "transition": Object {
        "arguments": Array [],
        "name": "receiveInvoice",
        "returnType": "String",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [],
      "name": "receiveInfo",
      "returnType": "String",
    },
    Object {
      "arguments": Array [
        "String",
      ],
      "name": "sendRequest",
      "returnType": "void",
    },
    Object {
      "arguments": Array [
        "String",
      ],
      "name": "tryPayment",
      "returnType": "PaymentStatus",
    },
    Object {
      "arguments": Array [],
      "name": "receiveInvoice",
      "returnType": "String",
    },
  ],
  "start": "State0",
  "states": Set {
    "end",
    "State0",
    "State1",
    "State2",
  },
}
`;

exports[`mungo examples: automaton test/fixtures/local-client-travelagency-bank/TravelAgencyProtocol.protocol 1`] = `
Object {
  "choices": Set {
    "decision:1",
  },
  "final": Set {
    "end",
  },
  "lTransitions": Array [
    Object {
      "from": "decision:1",
      "to": "State2",
      "transition": Object {
        "name": "OK",
      },
    },
    Object {
      "from": "decision:1",
      "to": "State0",
      "transition": Object {
        "name": "KO",
      },
    },
    Object {
      "from": "decision:1",
      "to": "State1",
      "transition": Object {
        "name": "TA",
      },
    },
  ],
  "labels": Array [
    Object {
      "name": "OK",
    },
    Object {
      "name": "KO",
    },
    Object {
      "name": "TA",
    },
  ],
  "mTransitions": Array [
    Object {
      "from": "State0",
      "to": "State0",
      "transition": Object {
        "arguments": Array [],
        "name": "getInfo",
        "returnType": "String",
      },
    },
    Object {
      "from": "State0",
      "to": "State1",
      "transition": Object {
        "arguments": Array [
          "String",
        ],
        "name": "receiveRequest",
        "returnType": "void",
      },
    },
    Object {
      "from": "State1",
      "to": "decision:1",
      "transition": Object {
        "arguments": Array [
          "String",
        ],
        "name": "tryPayment",
        "returnType": "PaymentStatus",
      },
    },
    Object {
      "from": "State2",
      "to": "State0",
      "transition": Object {
        "arguments": Array [],
        "name": "getInvoice",
        "returnType": "String",
      },
    },
  ],
  "methods": Array [
    Object {
      "arguments": Array [],
      "name": "getInfo",
      "returnType": "String",
    },
    Object {
      "arguments": Array [
        "String",
      ],
      "name": "receiveRequest",
      "returnType": "void",
    },
    Object {
      "arguments": Array [
        "String",
      ],
      "name": "tryPayment",
      "returnType": "PaymentStatus",
    },
    Object {
      "arguments": Array [],
      "name": "getInvoice",
      "returnType": "String",
    },
  ],
  "start": "State0",
  "states": Set {
    "end",
    "State0",
    "State1",
    "State2",
  },
}
`;
